import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

/**
 * Clase main (Entrega 2).
 * - Lee products.csv, salesmen.csv y sales_*.txt de la carpeta input.
 * - Calcula ventas por vendedor y por producto.
 * - Genera reportes preliminares en carpeta output.
 *
 * NOTA: Esta es la versión de la Entrega 2, con puntos pendientes marcados como TO-DO para entrega3.
 */
public class main {

    private static final String INPUT_DIR = "input";
    private static final String OUTPUT_DIR = "output";

    public static void main(String[] args) {
        try {
            ensureOutputDir();

            // 1) Leer productos
            Map<String, Product> products = loadProducts();

            // 2) Leer vendedores
            Map<String, String> salesmen = loadSalesmen();

            // 3) Procesar archivos de ventas
            File[] salesFiles = new File(INPUT_DIR).listFiles((dir, name) -> name.startsWith("sales_") && name.endsWith(".txt"));
            if (salesFiles == null || salesFiles.length == 0) {
                System.err.println("No se encontraron archivos de ventas en la carpeta input/");
                return;
            }

            Map<String, Double> totalBySalesman = new HashMap<>();
            Map<String, Integer> totalByProduct = new HashMap<>();

            for (File f : salesFiles) {
                List<String> lines = Files.readAllLines(f.toPath());
                if (lines.isEmpty()) continue;

                // Cabecera: TipoDoc;NumeroDoc
                String[] header = lines.get(0).split(";");
                String docType = header[0];
                String docNumber = header[1];
                String salesmanKey = docType + ";" + docNumber;

                double totalSales = 0.0;

                for (int i = 1; i < lines.size(); i++) {
                    String[] parts = lines.get(i).split(";");
                    if (parts.length < 2) continue; // línea vacía o incorrecta

                    String productId = parts[0];
                    int qty = Integer.parseInt(parts[1]);

                    Product p = products.get(productId);
                    if (p != null) {
                        totalSales += qty * p.price;
                        totalByProduct.put(productId, totalByProduct.getOrDefault(productId, 0) + qty);
                    }
                }

                totalBySalesman.put(salesmanKey, totalBySalesman.getOrDefault(salesmanKey, 0.0) + totalSales);
            }

            // 4) Generar reportes preliminares
            generateVendorsReport(salesmen, totalBySalesman);
            generateProductsReport(products, totalByProduct);

            System.out.println("main: Reportes preliminares generados en ./output/");

        } catch (Exception e) {
            System.err.println("Error en ejecución: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // ---------- MODELOS SIMPLES ----------
    static class Product {
        String id;
        String name;
        double price;
        Product(String id, String name, double price) {
            this.id = id; this.name = name; this.price = price;
        }
    }

    // ---------- UTILIDADES ----------
    private static void ensureOutputDir() throws IOException {
        Files.createDirectories(Paths.get(OUTPUT_DIR));
    }

    private static Map<String, Product> loadProducts() throws IOException {
        Map<String, Product> products = new HashMap<>();
        List<String> lines = Files.readAllLines(Paths.get(INPUT_DIR, "products.csv"));
        for (String line : lines) {
            if (line.trim().isEmpty()) continue;
            String[] parts = line.split(";");
            String id = parts[0];
            String name = parts[1];
            double price = Double.parseDouble(parts[2]);
            products.put(id, new Product(id, name, price));
        }
        return products;
    }

    private static Map<String, String> loadSalesmen() throws IOException {
        Map<String, String> salesmen = new HashMap<>();
        List<String> lines = Files.readAllLines(Paths.get(INPUT_DIR, "salesmen.csv"));
        for (String line : lines) {
            if (line.trim().isEmpty()) continue;
            String[] parts = line.split(";");
            String key = parts[0] + ";" + parts[1]; // TipoDoc;Numero
            String name = parts[2] + " " + parts[3];
            salesmen.put(key, name);
        }
        return salesmen;
    }

    private static void generateVendorsReport(Map<String, String> salesmen, Map<String, Double> totals) throws IOException {
        File f = new File(OUTPUT_DIR, "vendors_report.csv");
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(f))) {
            bw.write("NombreVendedor;Documento;TotalRecaudado");
            bw.newLine();
            for (Map.Entry<String, Double> e : totals.entrySet()) {
                String key = e.getKey();
                String name = salesmen.getOrDefault(key, "(desconocido)");
                bw.write(name + ";" + key + ";" + e.getValue());
                bw.newLine();
            }
        }
    }

    private static void generateProductsReport(Map<String, Product> products, Map<String, Integer> totals) throws IOException {
        File f = new File(OUTPUT_DIR, "products_report.csv");
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(f))) {
            bw.write("NombreProducto;PrecioUnidad;CantidadVendida");
            bw.newLine();
            for (Map.Entry<String, Integer> e : totals.entrySet()) {
                Product p = products.get(e.getKey());
                if (p != null) {
                    bw.write(p.name + ";" + p.price + ";" + e.getValue());
                    bw.newLine();
                }
            }
        }
    }
}
